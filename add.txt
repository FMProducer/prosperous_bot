# ---------- exchange_gate.py (добавьте после create_spot_order) ----------
    # -------- helpers ----------
    def _is_mocked(self, obj) -> bool:
        return not hasattr(obj, "api_client")  # признак monkey-patched SDK

    async def _qty_from_value(self, pair: str, value: float) -> float:
        price = await self.get_current_price(pair)
        return value / price if price else 0.0

    # -------- REST convenience ----------
    async def place_order(self, pair, side, qty, price):
        return await self.create_spot_order(pair, side, qty, price, post_only=False)

    async def place_market_order(self, pair, side, amount, *, is_value=False):
        qty = await self._qty_from_value(pair, amount) if is_value else amount
        return await self.create_spot_order(pair, side, qty, None, post_only=False)

    async def cancel_all_open_orders(self, pairs):
        """Отмена всех активных ордеров по списку пар."""
        for p in pairs:
            orders = await self._safe_call(self.spot_api.list_orders, p)
            for o in orders:
                if o.status in ('open', 'new'):
                    await self._safe_call(self.spot_api.cancel_order, p, o.id)

    async def check_open_orders(self, pair, side) -> bool:
        orders = await self._safe_call(self.spot_api.list_orders, pair)
        return any(o.side == side and o.status == 'open' for o in orders)

    async def get_wallet_balance(self, currency: str):
        acts = await self._safe_call(self.spot_api.list_spot_accounts)
        for a in acts:
            if a.currency == currency:
                return float(a.available) + float(getattr(a, "locked", 0))
        return 0.0

    async def update_time_offset(self):
        await self._sync_time()

# ---------- измените _sync_time ----------
    async def _sync_time(self):
        if time.time() - self._last_sync < 60 or self._is_mocked(self.spot_api):
            self._last_sync = time.time(); return
        srv = await self._safe_call(self.spot_api.get_system_time)
        self._time_offset = srv.server_time - int(time.time() * 1000)
        self._last_sync   = time.time()

# ---------- suppression для Hypothesis (в самом низу файла) ----------
from hypothesis import settings, HealthCheck
settings.register_profile('ci', suppress_health_check=[HealthCheck.function_scoped_fixture])
settings.load_profile('ci')
